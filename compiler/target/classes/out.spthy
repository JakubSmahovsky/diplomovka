rule init:
[
]-->[
  !Alice_init($X),
  !Bob_init($X,$Alice)
]

rule Alice_0:
[
  !Alice_init($X)
]--[
  Alice_1($X)
]->[
  Alice_1($X)
]

rule Alice_1:
let
  A=sdec(X, e)
in
[
  Alice_1($X),
  In($Bob),
  In(e),
  In($X)
]--[
  Alice_2($X,$Bob,e,A)
]->[
  Alice_2($X,$Bob,e,A)
]

rule Bob_0:
let
  e=senc(X, Alice)
in
[
  !Bob_init($X,$Alice)
]--[
  Bob_1($X,$Alice)
]->[
  Out($Bob),
  Out(e),
  Out($X),
  Bob_1($X,$Alice)
]

lemma executable:
exists-trace "
Ex e X A #t1 Bob #t0 Alice.
Alice_2($X,$Bob,e,A)@ #t0 &
Bob_1($X,$Alice)@ #t1
"
