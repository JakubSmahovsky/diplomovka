This file contains notes I gathered during research on tamarin prover.
It references other notes within this repository.
The purpose of this document is to aid me in writing my thesis.
Most entries are not relevant to the current state of the project,
but rather document failed attempts allong the research process.

Created 9/9/20

TARGET 0: Working on Needham Schroeder Secret Key protocol model.

Fail 1:
Bob deasn't know Alice's identity to verify it.
Enemy initiales protocol as follows:
E -> S: B, E, Ke
S -> B: {Ke, E, Kab, {Kab, B}Kes }Kbs
Bob missunderstands <E, Kab, {Kab, B}Kes> as Alice's identity in expected message {Kab, A}Kbs
At the moment can be found in tamarin/my/Needham_Schroeder_Secret_Key/NSSK_fail1.spthy

Thaught 2: 
Would Bob know not to accept a pair (or tripple) as a peer's identity?
Maybe I need a way to refuse accepting pairs instead of simple values?

Attempt 3:
Added a restriction, that forces identity not to be a pair funtion.
Merged with main protocol.
This may be assuming too much. When writing the compiler,
it may be a  better ide to add this as an optional check instead of assuming it's done.

Attempt 4:
Added key reveal rule as is the case in all public examples I've seen so far.
Changed sanity lemma to require both parties to correctly finish protocol.
Merged with main protocol.
Results unchanged.

Attempt 5:
Added authentication lemma for nssk protocol.
This lemma does not terminate as an attack under these conditions
should not exist, unless the messages are encoded in cbc mode.
I don't yet know if tamarin may terminate and prove that the attack is impossible.
I may come back to this in the future.

Thaught 6:
I will model short term key compromise like this:
Make a rule to compromise any variable.
Make a restriction to forbid compromise of long term keys.
Add actions Continuation_start(constant), Continuation_end(constant)
to mark rules which follow one after another and implicitly have a timeout.
Make a restriction to forbid combromise between continution start and end.
Found attack, imposter makes alice finish the protocol with fake nonce,
which is unnecessary, but still correct.

TARGET 1: Needham Schroeder Public Key protocol model

Thaught 1:
In the attack, honest principals need to treat the imposter
as an honest principal, knowing his identity. I'm starting to think
this is not possible to model the usual way.
I will try to make a minimalistic protocol 
to find a way to model this behaviour.

Result 2: 
I've reinvented the wheel! At least now I know why all protocols in the maual
had a rule for revealing long term keys.

Fail 3:
I managed to find an attack manually,
it's huge and automatic metrics are way off in most cases.
The attack is close enough to be considered valid although more complicated.
At the moment can be found in tamarin/my/Needham_Schroeder_Public_Key/NSPK_fail1.spthy
I will try to model a simpler version of the protocol first and may return later.

TARGET 2: Simplified Needham Schroeder Public Key protocol model

Fail 1:
The protocol is  much sipler than original NSPK. I found the attack manually.
Autoprove does not find the attack.
At the moment can be found in
tamarin/my/Simplified_Needham_Schroeder_Public_Key/Simplified_NSPK_fail1.spthy

Result 2:
I've added a rule to forbid mistaking pairs for simple values.
I've made it weaker compared to the one I used previously in TARGET 0 Attempt 3
by only requiring simple values not to be pairs containing values of their kind.
This still removes the loop where Alice keeps sending messages to another Alice
in the same stage of the protocol.
Autoprove still does not find the attack.
There is a loop, where the Impostor finds a secret key by decoding a 
message which doesn't contain it. I'm starting to suspect a bug in Tamarin.
It can be found in source 5 of !KU(t.1), named "Alice_2" in
tamarin/my/Simplified_Needham_Schroeder_Public_Key/Simplified_NSPK_result2.spthy

Fail 3:
I've made a restriction to see if the loop from previous result uses
the nonce from Alice's message as a key. It doesn't. 
At the moment can be found in
tamarin/my/Simplified_Needham_Schroeder_Public_Key/Simplified_NSPK_fail3.spthy
