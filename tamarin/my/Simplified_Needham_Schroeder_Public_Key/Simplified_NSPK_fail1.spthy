/*
  Simplified Needham-Schroeder Public Key protocol inspired by http://www.lsv.fr/Software/spore/nspk.html
  Server is removed from the protocol, as it is not necessary for the attack.  
  Following syntax from template instead of usual Tamarin syntax 
*/

theory Simplified_NSPK
begin

builtins: asymmetric-encryption

rule Register_KP:
  let 
    KP = pk(~KS)
  in
  [ Fr(~KS) ] 
  --[Unique(<'Register_KP', $X>)]->
  [ !Ltk($X, ~KS)
  , !Pk($X, KP)
  , Out(KP) ]

rule Reveal_KS:
  [!Ltk($X, KS)] --[KSReveal($X)]-> [Out(KS)]

rule Alice_1:
  [ !Pk($B, KPb)
  , Fr(~Na) ]
  --> 
  [ Out(aenc(<~Na, $A>, KPb))
  , Alice_1($A, $B, KPb, ~Na)]

rule Bob_1:
  [ In(aenc(<Na, $A>, KPb))
  , !Pk($B, KPb)
  , !Pk($A, KPa)
  , Fr(~Nb) ]
  -->
  [ Out(aenc(<Na, ~Nb>, KPa))
  , Bob_1($A, $B, KPa, KPb, Na, ~Nb)]

rule Alice_2:
  [ Alice_1($A, $B, KPb, Na)
  , In(aenc(<Na, Nb>,KPa))
  , !Pk($A, KPa)]
  --[Alice_done($A, $B, KPa, KPb, Na, Nb)]->
  [ Out(aenc(Nb, KPb)) ]

rule Bob_2:
  [ Bob_1($A, $B, KPa, KPb, Na, Nb)
  , In(aenc(Nb, KPb))]
  --[Bob_done($A, $B, KPa, KPb, Na, Nb)]-> []

restriction Unique:
  "All x #i #j . Unique(x) @#i & Unique(x) @#j ==> #i = #j"

lemma executable:
  exists-trace
    "Ex A B KPa KPb Na Nb #i #j.
      Bob_done(A, B, KPa, KPb, Na, Nb) @#i &
      Alice_done(A, B, KPa, KPb, Na, Nb) @#j"

lemma authentication:
  all-traces
    "All A B KPa KPb Na Nb #i .
      Bob_done(A, B, KPa, KPb, Na, Nb) @#i
    ==>
    (Ex KPb #j.
      Alice_done(A, B, KPa, KPb, Na, Nb) @#j)
    | (Ex #j .
      KSReveal(A) @#j)
    | (Ex #j .
      KSReveal(B) @#j)
    "

simplify
solve( Bob_1( $A, $B, KPa, KPb, Na, Nb ) ▶₀ #i )
  case Bob_1
  solve( !KU( aenc(~Nb, pk(~KS.1)) ) @ #vk )
    case Alice_2_case_1
    by sorry
  next
    case Alice_2_case_2
    by sorry
  next
    case Bob_1
    by sorry
  next
    case c_aenc
    solve( !KU( ~Nb ) @ #vk.2 )
      case Alice_2
      solve( !KU( ~KS.2 ) @ #vk.5 )
        case Alice_2
        by sorry
      next
        case Bob_1
        by sorry
      next
        case Reveal_KS
        solve( !KU( aenc(<Na, $A>, pk(~KS.1)) ) @ #vk.3 )
          case Alice_1
          by sorry
        next
          case Alice_2_case_1
          by sorry
        next
          case Alice_2_case_2
          by sorry
        next
          case Bob_1
          by sorry
        next
          case c_aenc
          solve( !KU( aenc(<~Na.1, Nb.1>, pk(~KS.3)) ) @ #vk.5 )
            case Alice_1
            by contradiction /* forbidden KD-fact */
          next
            case Alice_2_case_1
            by sorry
          next
            case Alice_2_case_2
            by sorry
          next
            case Bob_1_case_1
            solve( (#vr.4, 0) ~~> (#vk.1, 0) )
              case Var_fresh_1_Nb
              solve( !KU( ~Na ) @ #vk.7 )
                case Alice_1
                solve( !KU( pk(~KS.1) ) @ #vk.6 )
                  case Alice_2
                  by sorry
                next
                  case Bob_1
                  by sorry
                next
                  case Register_KP
                  SOLVED // trace found
                next
                  case c_pk
                  by sorry
                qed
              next
                case Alice_2
                by sorry
              next
                case Bob_1
                by sorry
              qed
            qed
          next
            case Bob_1_case_2
            by sorry
          next
            case c_aenc
            by contradiction /* cyclic */
          qed
        qed
      qed
    next
      case Bob_1_case_1
      by sorry
    next
      case Bob_1_case_2
      by sorry
    qed
  qed
qed

end