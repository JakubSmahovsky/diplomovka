/*
  Simplified Needham-Schroeder Public Key protocol inspired by http://www.lsv.fr/Software/spore/nspk.html
  Server is removed from the protocol, as it is not necessary for the attack.  
  Following syntax from template instead of usual Tamarin syntax 
*/

theory Simplified_NSPK
begin

builtins: asymmetric-encryption

rule Register_KP:
  let 
    KP = pk(~KS)
  in
  [ Fr(~KS) ]
  --[Unique(<'Register_KP', $X>)
  , Kind(KP, 'KP')
  , Kind(~KS, 'KS')]->
  [ !Ltk($X, ~KS)
  , !Pk($X, KP)
  , Out(KP) ]

rule Reveal_KS:
  [!Ltk($X, KS)] --[KSReveal($X)]-> [Out(KS)]

rule Alice_1:
  [ !Pk($B, KPb)
  , Fr(~Na) ]
  --[Kind(~Na, 'nonce')]-> 
  [ Out(aenc(<~Na, $A>, KPb))
  , Alice_1($A, $B, KPb, ~Na)]

rule Bob_1:
  [ In(aenc(<Na, $A>, KPb))
  , !Pk($B, KPb)
  , !Pk($A, KPa)
  , Fr(~Nb) ]
  --[Kind(Na, 'nonce')
  , Kind(~Nb, 'nonce')
  , Weak_Simple_Value(Na)]->
  [ Out(aenc(<Na, ~Nb>, KPa))
  , Bob_1($A, $B, KPa, KPb, Na, ~Nb)]

rule Alice_2:
  [ Alice_1($A, $B, KPb, Na)
  , In(aenc(<Na, Nb>,KPa))
  , !Pk($A, KPa)
  , !Pk($B, KPb)
  , !Ltk($B, KSb)]
  --[Definitely_key(KSb)
  , Kind(Nb, 'nonce')
  , Weak_Simple_Value(Na)
  , Weak_Simple_Value(Nb)
  , Alice_done($A, $B, KPa, KPb, Na, Nb)]->
  [ Out(aenc(Nb, KPb)) ]

rule Bob_2:
  [ Bob_1($A, $B, KPa, KPb, Na, Nb)
  , In(aenc(Nb, KPb))]
  --[Weak_Simple_Value(Na)
  , Weak_Simple_Value(Nb)
  , Bob_done($A, $B, KPa, KPb, Na, Nb)]-> []

restriction Unique:
  "All x #i #j . Unique(x) @#i & Unique(x) @#j ==> #i = #j"

/* A simple value cannot be replaced by a pair, if at least one
  part of the pair is of the same kind as the intended simple value.
  That is: Simple value cannot be replaced by something obviously longer.*/
restriction Weak_Simple_Value:
  "All x y kind #i #j .
    Weak_Simple_Value(<x, y>) @#i & 
    Kind(<x, y>, kind) @#j &
    ((Ex #k . Kind(x, kind) @#k) | (Ex #k . Kind(y, kind) @#k))
  ==> F"

restriction Definitely_key:
  "All x #i #j. Definitely_key(x) @#i & Kind(x, 'nonce') @#j ==> F"

lemma executable:
  exists-trace
    "Ex A B KPa KPb Na Nb #i #j.
      Bob_done(A, B, KPa, KPb, Na, Nb) @#i &
      Alice_done(A, B, KPa, KPb, Na, Nb) @#j"

lemma authentication:
  all-traces
    "All A B KPa KPb Na Nb #i .
      Bob_done(A, B, KPa, KPb, Na, Nb) @#i
    ==>
    (Ex KPb #j.
      Alice_done(A, B, KPa, KPb, Na, Nb) @#j &
      #j < #i)
    | (Ex #j .
      KSReveal(A) @#j)
    | (Ex #j .
      KSReveal(B) @#j)
    "
/* I was having problem with a cycle, where a key was being found
by decoding a message containig a nonce. I made a rule forbiding
the use of that nonce as that key. It din't help.*/

end