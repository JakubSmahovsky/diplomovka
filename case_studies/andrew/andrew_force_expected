// See the original first...
// We can force the expected attack if we can make message m4
// verifiably different from m2 and m3.
// We can do that by just adding some constant to it, eg. 'm4'

// We should now find the expected attack as an attack on
// injective-authentication (adversary replays m4, but doesn't learn Kab2)
// Tamarin doesn't terminate... :(

principals: Alice, Bob
unary-equals: implicit

Bob [
  knows private Kab
  knows public Alice
]

Alice [
  knows private Kab
  generates Na
  m1 = ENC(Kab, Na)
]
Alice -> Bob: Alice, m1

Bob [
  Na = DEC(Kab, m1)
  generates Nb
  m2 = ENC(Kab, {{Na, '1'}, Nb})
]
Bob -> Alice: m2

Alice [
  {{Na, '1'}, Nb} = DEC(Kab, m2)
  m3 = ENC(Kab, {Nb, '1'})
]
Alice -> Bob: m3

Bob [
  {Nb, '1'} = DEC(Kab, m3)
  generates Kab2, Nb2
  m4 = ENC(Kab, {Kab2, Nb2, 'm4'})
]
Bob -> Alice: m4

Alice [
  {Kab2, Nb2, 'm4'} = DEC(Kab, m4)
]

queries [
  // does not terminate
  // authentication? Bob -> Alice: m4

  injective-authentication? Bob -> Alice: m4
]
